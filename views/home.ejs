<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>

    <script
      src="https://code.jquery.com/jquery-3.5.1.min.js"
      integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
      crossorigin="anonymous"
    ></script>
  </head>
  <body>

    <div id="kakaoMap" style="width: 100%; height:400px;">
    </div>
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=d698315979c98f65a32752dc88bd959d"></script>
    <script
    type="text/javascript"
   src="https://apis.openapi.sk.com/tmap/jsv2?version=1&appKey=l7xx81d8228c35324ed3be2ba79ed4c15a67"></script>
    <div id='restareaList' style="width: 40%; height: 400px; overflow: scroll; overflow-x: hidden">
      <form action="/restAreaInfo">
        <ul id='listItems'>
        </ul>
      </form>

    </div>
</body>

</html>

<!-- home 화면 로딩 되면, 휴게소좌표 찍기위해서 데이터 요청 -->
<script>
    const ajax = $.ajax;
    let rName;
    mainFlow();

    function mainFlow() {
        //console.log('A');
        getLoadNm();
        //console.log('B');
    }

    async function getUserPosition(){
        return new Promise((resolve, reject)=>{
            var userPosition = {
                lat : null,
                lon : null,
            };
            navigator.geolocation.getCurrentPosition(function(position){
                userPosition.lat = position.coords.latitude;
                userPosition.lon = position.coords.longitude;
                console.log('a', userPosition.lat, userPosition.lon);
                if(userPosition.lat == null || userPosition.lon == null){
                    console.log('b', userPosition.lat, userPosition.lon);
                } else {
                    console.log('2');
                    resolve(userPosition);
                }
            })
        })
    }

    
    async function getLoadNm() {
        
        //현재위치 받아오는거 막음
        //const latlng = await getUserPosition();

        const latlng = {
            lat : 37.2651139800,
            lon : 127.4036901000,
        }

        // T map 도로명 API
        ajax({
            method:"GET",
            //url:"http://223.39.119.112/tmapv20/road/nearToRoad?version=1",//가까운 도로 찾기 api 요청 url입니다.
            url:"https://apis.openapi.sk.com/tmap/road/nearToRoad?version=1",//가까운 도로 찾기 api 요청 url입니다.
            async : false,
            data:{
                "appKey" : "l7xx81d8228c35324ed3be2ba79ed4c15a67",
                "lon" : latlng.lon,
                "lat" : latlng.lat,
            },
            success:function(response){
                
                var resultHeader, resultlinkPoints;
                
                resultHeader = response.resultData.header;
                resultlinkPoints = response.resultData.linkPoints;
                
                rName = resultHeader.roadName;
                console.log("rName : ",rName);

                ajax({
                    url: '/requestRestAreaLatLong',
                    type: 'POST',
                    async : false,
                    // data : {
                    //     road_nm : rName,
                    // },
                    success: function(data) {
                        const results = JSON.parse(data);
                        var map = drawRestAreaMarker(results);
                        drawUserMarker(results, map, latlng);
                    }
                });
            
                    
            },
            error:function(request,status,error){
                console.log("code:"+request.status+"\n"+"message:"+request.responseText+"\n"+"error:"+error);
            }
        });
    }

    localStorage.removeItem('cartItem');


    // 휴게소 목록 리스트 그리기
    function drawList(results, currentPos) {
         var iValue = rName.indexOf("고속도로");
        if(iValue != -1)
        {
            rName = rName.substring(0,iValue);
        }

        console.log(rName);
        
        const ul = document.getElementById('listItems');
        console.log(ul);
        while(ul.firstChild) {
            ul.removeChild(ul.firstChild);
        }
        const submit = document.createElement('input');
        submit.type = 'submit';
        submit.value = '휴게소 정보';
        var result_distance = new Array(results.Size);
        for(i in results) {
            var restArea_roadName = results[i].road_nm;
            restArea_roadName = restArea_roadName.substring(0,restArea_roadName.length-1);
            if(restArea_roadName == rName){
                var distance = {
                    lat : results[i].latitude,
                    lon : results[i].longitude,
                }
                result_distance[i] = new Array(2);
                var dis = computeDistance(currentPos, distance);
                result_distance[i] = [dis,i];
                results[i].road_nm = restArea_roadName;
            }
            result_distance.sort(sortFunction);
            function sortFunction(a,b){
                return (a[0] < b[0]) ? -1 : 1;
            }
        }

        for(var i=0; i<6; i++){
            var idx = result_distance[i][1];
            const li = document.createElement('li');
            const label = document.createElement('label');
            label.for = results[idx].area_code;
            label.innerHTML = results[idx].area_nm;
            const input = document.createElement('input');
            input.type = 'radio';
            input.id = results[idx].area_code;
            input.name = 'area_code';
            input.value = results[idx].area_code;
            label.innerHTML += " 약 " + result_distance[i][0].toFixed(2) + "km";
            const br = document.createElement('br');
            li.appendChild(label);
            li.appendChild(input);
            ul.appendChild(li);
            ul.appendChild(br);
        }
        ul.appendChild(submit);
  }
    // 지도그리기
    function drawUserMarker(results, map, userPosition) {
        // 현재 입력받은 위치 - 마커표시
        var marker;
        var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png', // 마커이미지의 주소입니다    
            imageSize = new kakao.maps.Size(32, 30), // 마커이미지의 크기입니다
            imageOption = {offset: new kakao.maps.Point(27, 69)}; // 마커이미지의 옵션입니다. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정합니다.
        var lat = userPosition.lat;
        var lon = userPosition.lon;
        // 마커의 이미지정보를 가지고 있는 마커이미지를 생성합니다
        var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);
        // 현재 위치를 중심으로 지도 생성
        map.setCenter(new kakao.maps.LatLng(lat, lon));
        // 마커 위치
        var markerPosition  = new kakao.maps.LatLng(lat, lon); 
        marker = new kakao.maps.Marker({
            position:markerPosition,
            image: markerImage // 마커이미지 설정 
        });
        marker.setMap(map);
        
        drawList(results, userPosition);
    }
 
 
    function drawRestAreaMarker(data) {
        var data = data;
        // var mapContainer = document.createElement("div");
        var mapContainer = document.getElementById("kakaoMap");
        var mapOption = {
            center: new kakao.maps.LatLng(37.5677463677699,126.9153946742084), //지도의 중심좌표
            level: 7,
        };
        var map = new kakao.maps.Map(mapContainer, mapOption); // 지도 생성 및 객체 리턴
        // 인포윈도우를 생성합니다
        var infowindow = new kakao.maps.InfoWindow({
            content: null,
            removable: true,
        });
        // 휴게소 좌표 - 마커표시
        for (var i in data) {
            var areaInfo = {
                name: data[i].area_nm,
                code: data[i].area_code,
                latitude: data[i].latitude,
                longitude: data[i].longitude,
            }
            var marker = new kakao.maps.Marker({
                map: map,
                position: new kakao.maps.LatLng(areaInfo.latitude, areaInfo.longitude),
                title: areaInfo.name,
                clickable: true
            });
            
            kakao.maps.event.addListener(marker, 'click', makeOverListener(map, marker, infowindow, areaInfo));
        }
        return map;
    }
  
  
    function makeOverListener(map, marker, infowindow, areaInfo) {
        return function() {
            var iwContent =  `<div class="wrap">
                    <div class="info">    
                        <div class="title">    
                            ${areaInfo.name}
                            <div class="close" onclick="closeOverlay()" title="닫기"></div>    
                        </div>    
                        <div class="body">
                            <form action="/restAreaInfo">
                                <input style="display:none" id = "area_code" name = "area_code" value = ${areaInfo.code}>
                                <input type="submit" value='휴게소정보'>
                            </form>
                        </div>    
                    </div>       
                </div>`
            infowindow.setContent(iwContent);
            infowindow.setPosition(new kakao.maps.LatLng(areaInfo.latitude, areaInfo.longitude));
            infowindow.open(map,marker);
        };
    }
 
 
    function computeDistance(startCoords, destCoords) {
        var startLatRads = degreesToRadians(startCoords.lat);
        var startLongRads = degreesToRadians(startCoords.lon);
        var destLatRads = degreesToRadians(destCoords.lat);
        var destLongRads = degreesToRadians(destCoords.lon);
        var Radius = 6371; //지구의 반경(km)
        var distance = Math.acos(Math.sin(startLatRads) * Math.sin(destLatRads) + 
                        Math.cos(startLatRads) * Math.cos(destLatRads) *
                        Math.cos(startLongRads - destLongRads)) * Radius;
        return distance;
    }
    function degreesToRadians(degrees) {
        radians = (degrees * Math.PI)/180;
        return radians;
    }
</script>